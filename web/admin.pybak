assert(False)
from web.accounts.models import *


if User not in admin.site._registry: 
    admin.site.register(User, UserProfileAdmin)
else:
    admin.site.unregister(User)
    admin.site.register(User, UserProfileAdmin)

#from django.contrib.admin.sites import AdminSite
#from django import http, template
#from django.shortcuts import render_to_response
#from django.utils.safestring import mark_safe
#from django.utils.text import capfirst
#from django.utils.translation import ugettext_lazy, ugettext as _
#from django.views.decorators.cache import never_cache
#
#class CuratorAdmin(AdminSite):
#    def index(self, request, extra_context=None):
#        """
#        Displays the main admin index page, which lists all of the installed
#        apps that have been registered in this site.
#        """
#        app_dict = {}
#        user = request.user
#        for model, model_admin in self._registry.items():
#            app_label = model._meta.app_label
#            has_module_perms = user.has_module_perms(app_label)
#
#            if has_module_perms:
#                perms = model_admin.get_model_perms(request)
#
#                # Check whether user has any perm for this module.
#                # If so, add the module to the model_list.
#                if True in perms.values():
#                    model_dict = {
#                        'name': capfirst(model._meta.verbose_name_plural),
#                        'admin_url': mark_safe('%s/%s/' % (app_label, model.__name__.lower())),
#                        'perms': perms,
#                    }
#                    if app_label in app_dict:
#                        app_dict[app_label]['models'].append(model_dict)
#                    else:
#                        app_dict[app_label] = {
#                            'name': app_label.title(),
#                            'app_url': app_label + '/',
#                            'has_module_perms': has_module_perms,
#                            'models': [model_dict],
#                        }
#
#        # Sort the apps alphabetically.
#        app_list = app_dict.values()
#        app_list.sort(lambda x, y: cmp(x['name'], y['name']))
#
#        # Sort the models alphabetically within each app.
#        for app in app_list:
#            app['models'].sort(lambda x, y: cmp(x['name'], y['name']))
#
#        context = {
#            'title': _('Curator Admin'),
#            'app_list': app_list,
#            'root_path': self.root_path,
#        }
#        context.update(extra_context or {})
#        context_instance = template.RequestContext(request, current_app=self.name)
#        return render_to_response(self.index_template or 'admin/index.html', context,
#            context_instance=context_instance
#        )
#    index = never_cache(index)
#
## Instantiate the curator admin
#curator_admin = CuratorAdmin( name='CuratorAdmin' )
#curator_admin.index_template='curator/index.html'
#curator_admin.login_template='curator/login.html'
